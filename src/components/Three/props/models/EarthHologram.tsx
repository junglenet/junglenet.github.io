/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Meee (https://sketchfab.com/Meee)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/earth-hologram-87072288fb234226b9a3f02ae674a310
title: Earth hologram
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    TERRE1_0: THREE.Mesh
    Sphere002_0: THREE.Mesh
    Circle643_0: THREE.Mesh
    Circle455_0: THREE.Mesh
    Icosphere002_0: THREE.Mesh
    Circle_0: THREE.Mesh
  }
  materials: {
    ['Material.005']: THREE.MeshStandardMaterial
    ['Material.006']: THREE.MeshStandardMaterial
    ['Material.004']: THREE.MeshStandardMaterial
    ['Material.007']: THREE.MeshStandardMaterial
    ['Material.008']: THREE.MeshStandardMaterial
    ['Material.010']: THREE.MeshStandardMaterial
  }
}

type ActionName = 'Take 01'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export default function Model({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('/earth-holo-transformed.glb') as GLTFResult
  // @ts-ignore
  const { actions } = useAnimations<GLTFActions>(animations, group)
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={0.31} userData={{ name: 'Sketchfab_model' }}>
          <group name="Root" userData={{ name: 'Root' }}>
            <group name="TERRE1" scale={3.27} userData={{ name: 'TERRE1' }}>
              <mesh name="TERRE1_0" geometry={nodes.TERRE1_0.geometry} material={materials['Material.005']} userData={{ name: 'TERRE1_0' }} />
            </group>
            <group name="Sphere002" rotation={[0, 0, -3.01]} scale={0.97} userData={{ name: 'Sphere.002' }}>
              <mesh name="Sphere002_0" geometry={nodes.Sphere002_0.geometry} material={materials['Material.006']} userData={{ name: 'Sphere.002_0' }} />
            </group>
            <group name="Circle643" scale={4.79} userData={{ name: 'Circle.643' }}>
              <mesh name="Circle643_0" geometry={nodes.Circle643_0.geometry} material={materials['Material.004']} userData={{ name: 'Circle.643_0' }} />
            </group>
            <group name="Circle455" scale={0.18} userData={{ name: 'Circle.455' }}>
              <mesh name="Circle455_0" geometry={nodes.Circle455_0.geometry} material={materials['Material.007']} morphTargetDictionary={nodes.Circle455_0.morphTargetDictionary} morphTargetInfluences={nodes.Circle455_0.morphTargetInfluences} userData={{ targetNames: ['0'], name: 'Circle.455_0' }} />
            </group>
            <group name="Circle" scale={6.13} userData={{ name: 'Circle' }}>
              <group name="Icosphere002" position={[1, 0, 0]} scale={0.06} userData={{ name: 'Icosphere.002' }}>
                <mesh name="Icosphere002_0" geometry={nodes.Icosphere002_0.geometry} material={materials['Material.008']} userData={{ name: 'Icosphere.002_0' }} />
              </group>
              <mesh name="Circle_0" geometry={nodes.Circle_0.geometry} material={materials['Material.010']} userData={{ name: 'Circle_0' }} />
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/earth-holo-transformed.glb')
